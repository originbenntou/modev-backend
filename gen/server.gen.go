// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"gopkg.in/yaml.v2"
	"io"
	"os"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/labstack/echo/v4"
	"github.com/gin-gonic/gin"
	"github.com/gofiber/fiber/v2"
	"github.com/gorilla/mux"
)
// ServerInterface represents all server handlers.
type ServerInterface interface {

// (GET /tweets)
GetTweets(w http.ResponseWriter, r *http.Request, params GetTweetsParams)

}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
    Handler ServerInterface
    HandlerMiddlewares []MiddlewareFunc
    ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler



// GetTweets operation middleware
func (siw *ServerInterfaceWrapper) GetTweets(w http.ResponseWriter, r *http.Request) {
  ctx := r.Context()
  
  var err error
  

  



  
    // Parameter object where we will unmarshal all parameters from the context
    var params GetTweetsParams

    // ------------- Required query parameter "category" -------------
      
      
        if paramValue := r.URL.Query().Get("category"); paramValue != "" {

        

        
        } else {
            siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "category"})
            return
        }
      
      
      err = runtime.BindQueryParameter("form", true, true, "category", r.URL.Query(), &params.Category)
      if err != nil {
        siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "category", Err: err})
        return
      }
      
  

    

    
  

  var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
    siw.Handler.GetTweets(w, r, params)
  })

  
  for _, middleware := range siw.HandlerMiddlewares {
    handler = middleware(handler)
  }
  

  handler.ServeHTTP(w, r.WithContext(ctx))
}


type UnescapedCookieParamError struct {
    ParamName string
  	Err error
}

func (e *UnescapedCookieParamError) Error() string {
    return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
    return e.Err
}

type UnmarshallingParamError struct {
    ParamName string
    Err error
}

func (e *UnmarshallingParamError) Error() string {
    return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
    return e.Err
}

type RequiredParamError struct {
    ParamName string
}

func (e *RequiredParamError) Error() string {
    return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
    ParamName string
    Err error
}

func (e *RequiredHeaderError) Error() string {
    return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
    return e.Err
}

type InvalidParamFormatError struct {
    ParamName string
	  Err error
}

func (e *InvalidParamFormatError) Error() string {
    return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
    return e.Err
}

type TooManyValuesForParamError struct {
    ParamName string
    Count int
}

func (e *TooManyValuesForParamError) Error() string {
    return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
  return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
    BaseURL string
    BaseRouter chi.Router
    Middlewares []MiddlewareFunc
    ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
    return HandlerWithOptions(si, ChiServerOptions {
        BaseRouter: r,
    })
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
    return HandlerWithOptions(si, ChiServerOptions {
        BaseURL: baseURL,
        BaseRouter: r,
    })
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
r := options.BaseRouter

if r == nil {
r = chi.NewRouter()
}
if options.ErrorHandlerFunc == nil {
    options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
        http.Error(w, err.Error(), http.StatusBadRequest)
    }
}
wrapper := ServerInterfaceWrapper{
Handler: si,
HandlerMiddlewares: options.Middlewares,
ErrorHandlerFunc: options.ErrorHandlerFunc,
}

r.Group(func(r chi.Router) {
r.Get(options.BaseURL+"/tweets", wrapper.GetTweets)
})

return r
}

    type GetTweetsRequestObject struct {
        Params GetTweetsParams
        }

    type GetTweetsResponseObject interface {
        VisitGetTweetsResponse(w http.ResponseWriter) error
    }

    
        

        
            
            type GetTweets200JSONResponse  []Tweets
            

            func (response GetTweets200JSONResponse) VisitGetTweetsResponse(w http.ResponseWriter) error {
                w.Header().Set("Content-Type", "application/json")
                w.WriteHeader(200)
                
                return json.NewEncoder(w).Encode(response)
                }
        

        
    
        

        
            
            type GetTweets400JSONResponse  struct {
    Message *string`json:"message,omitempty"`
}
            

            func (response GetTweets400JSONResponse) VisitGetTweetsResponse(w http.ResponseWriter) error {
                w.Header().Set("Content-Type", "application/json")
                w.WriteHeader(400)
                
                return json.NewEncoder(w).Encode(response)
                }
        

        
    
        

        
            
            type GetTweets500JSONResponse  struct {
    Message *string`json:"message,omitempty"`
}
            

            func (response GetTweets500JSONResponse) VisitGetTweetsResponse(w http.ResponseWriter) error {
                w.Header().Set("Content-Type", "application/json")
                w.WriteHeader(500)
                
                return json.NewEncoder(w).Encode(response)
                }
        

        
    


// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

// (GET /tweets)
GetTweets(ctx context.Context, request GetTweetsRequestObject) (GetTweetsResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
    RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
    ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
    return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions {
        RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
            http.Error(w, err.Error(), http.StatusBadRequest)
        },
        ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
            http.Error(w, err.Error(), http.StatusInternalServerError)
        },
    }}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
    return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
    ssi StrictServerInterface
    middlewares []StrictMiddlewareFunc
    options StrictHTTPServerOptions
}


    
    // GetTweets operation middleware
    func (sh *strictHandler) GetTweets(w http.ResponseWriter, r *http.Request, params GetTweetsParams) {
        var request GetTweetsRequestObject

        request.Params = params
        

        handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
            return sh.ssi.GetTweets(ctx, request.(GetTweetsRequestObject))
        }
        for _, middleware := range sh.middlewares {
            handler = middleware(handler, "GetTweets")
        }

        response, err := handler(r.Context(), w, r, request)

        if err != nil {
            sh.options.ResponseErrorHandlerFunc(w, r, err)
        } else if validResponse, ok := response.(GetTweetsResponseObject); ok {
            if err := validResponse.VisitGetTweetsResponse(w); err != nil {
                sh.options.ResponseErrorHandlerFunc(w, r, err)
            }
        } else if response != nil {
            sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
        }
    }
// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

    "H4sIAAAAAAAC/7RUTW/UQAz9K5HhmG6ytCA1Jz6KUA9IFe2Jag/uxJtOm/mox1moVvnvyLNpyrK9gIS0",
    "hxnvPPv5+TlbMMHF4MlLgmYLydySw3y8+kG0C0YOkVgs5Ru27RkK6ZF+oos9QQPL09PTo3p5VC+v6rrJ",
    "v+9QgjxG/TcJW9/BWIJt93DLEtaBHQo0YL28O3nGWC/UEStIsEt7sGv4hAIlXDCJPEIJlw77HlYlWCGX",
    "3x5UngLIjI96H7jfb+FWJKamqqbIwgR32MFYAtPDYJlapWFbKGdBdjlXMybc3JERGBVk/TpoORO8oJFc",
    "2aHt9Rnbzvob8l7C8L7TaK49ltBSMmyj2OChga/hjDbFh4vzYjclZWclc3ehpc3RDZp78kppQ5x2oHpR",
    "L5aaK0TyGC00cLyoF8dQQkS5zVpVMo+6o8xN541a9ryFBr6QTGZQEKMjIU7QXG/Bao2HgVin4NEpGYNC",
    "XciRZ62EByone2mFltY49Dr33t6rduQHp5Lm6+pQ+JVmSzH4tLPhm7p+EpR8Jo0x9tZk2tVd0u63vxWc",
    "nfGaaQ0NvKqenV9Ntq+mNg/sMh4MIw3GUErroS9msRR38pe09nfLUUrY/bFb536DvW2LiyfpX7TlC6bb",
    "Z/wR2+IbPQyURIm+/R9EhdhjX1wSb4iLz8zhH8m+nGqcPwbXMHl2lcEpv9pZMi/2vM0Y7cIFCZKGe9S9",
    "qkCtNGXZPnl2yjauxl8BAAD//zoWiecSBQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
    zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
    if err != nil {
        return nil, fmt.Errorf("error base64 decoding spec: %s", err)
    }
    zr, err := gzip.NewReader(bytes.NewReader(zipped))
    if err != nil {
        return nil, fmt.Errorf("error decompressing spec: %s", err)
    }
    var buf bytes.Buffer
    _, err = buf.ReadFrom(zr)
    if err != nil {
        return nil, fmt.Errorf("error decompressing spec: %s", err)
    }

    return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
    var res = make(map[string]func() ([]byte, error))
    if len(pathToFile) > 0 {
        res[pathToFile] = rawSpec
    }
    
    
    return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
    var resolvePath = PathToRawSpec("")

    loader := openapi3.NewLoader()
    loader.IsExternalRefsAllowed = true
    loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
        var pathToFile = url.String()
        pathToFile = path.Clean(pathToFile)
        getSpec, ok := resolvePath[pathToFile]
        if !ok {
            err1 := fmt.Errorf("path not found: %s", pathToFile)
            return nil, err1
        }
        return getSpec()
    }
    var specData []byte
    specData, err = rawSpec()
    if err != nil {
        return
    }
    swagger, err = loader.LoadFromData(specData)
    if err != nil {
        return
    }
    return
}
